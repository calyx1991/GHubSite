<!DOCTYPE html>
<html lang="zh-CN">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="在线三维建模网站，采用webgl技术，在浏览器中进行三维设计">
    <meta name="keywords" content="三维建模，细分建模，webgl，sketchup, stl, obj, 3d打印, 模型下载，三维设计，数字几何处理">
    <link rel="icon" href="/images/favicon.png">

    <title>网格简化</title>

    <!-- Bootstrap core CSS -->
    <link href="/stylesheets/bootstrap.min.css" rel="stylesheet">

    <!-- Custom styles for this template -->
    <link href="/stylesheets/notes.css" rel="stylesheet">
    <link href="/stylesheets/prettify.css" rel="stylesheet" />
    <script src="/javascripts/Dependence/prettify.js"></script>
    <link href="/stylesheets/homepagetoolbar.css" rel="stylesheet">
    <link href="/stylesheets/homepagefooter.css" rel="stylesheet">
    <script src="/javascripts/Tool/baidutongji.js"></script>
    <script src="/javascripts/Dependence/run_prettify.js?lang=css&amp;skin=sunburst"></script>
  </head>

  <body>

    <% include ../homepagetoolbar %>
    
    <div class="container">
        <h2>网格简化 <small></small></h2>

        <p>网格简化可以减少网格的三角片数量，同时尽量保持住网格的几何信息或其它属性（如纹理）。它是网格处理里的经典问题，广泛应用于各个领域：</p>
        <li class="contentli">游戏领域：游戏场景里的网格都很简单，适合快速渲染；简单的模型也适合快速的物理碰撞检测</li>
        <li class="contentli">多分辨率加载模型（Level of Detail）</li>
        <li class="contentli">三维模型的网页展示</li>
        <img class="featurette-image img-responsive center-block" src="/images/meshsimplification.jpg" alt="meshsimplification">
        <p>通常情况下，我们讲的网格简化，需要保持住网格的拓扑结构，它区别于下图的Wrap操作。同时，它也区别于<a href="/notes/delaunaytriangulation" target="_blank">Remesh</a>，虽然都能达到网格简化的目的。它一般经过一系列局部的简化操作（比如顶点删除，边塌陷），来达到网格简化目的。</p>
        <img class="featurette-image img-responsive center-block" src="/images/wrap_example_0.png" alt="wrap_example_0">
        <p></p>
        <hr class="line-divider">

        <h4>顶点简化</h4>
        <p>基于顶点的简化分为两步：</p>
        <li class="contentli">移除顶点和顶点的邻接三角片，产生一个洞</li>
        <li class="contentli">把洞补上</li>
        <img class="featurette-image img-responsive center-block" src="/images/VertexRemoval.png" alt="VertexRemoval">
        <hr class="line-divider">

        <h4>边简化</h4>
        <p>基于边的简化分为两步：</p>
        <li class="contentli">移除边以及边相邻的三角片</li>
        <li class="contentli">把边的两个端点合并为一个顶点</li>
        <img class="featurette-image img-responsive center-block" src="/images/EdgeCollapse.png" alt="EdgeCollapse">
        <hr class="line-divider">

        <h4>简化误差度量</h4>
        <p>基于局部操作的误差度量：每次误差计算，都是与上次迭代的局部面片做比较。它的特点：</p>
        <li class="contentli">操作简单，计算速度快</li>
        <li class="contentli">局部迭代有累计误差</li>
        <p>基于全局操作的误差度量：每次误差计算，都是与原始网格做比较。它的特点：</p>
        <li class="contentli">计算速度相对较慢</li>
        <li class="contentli">对整体误差的控制优于局部操作</li>
        <hr class="line-divider">

        <h4>带纹理坐标的网格简化</h4>
        <p>单纯的网格简化和带纹理坐标的网格简化是有区别的，前者的简化的对象是下面左图所示的网格，后者的简化对象是UV域的网格（下面右图所示）。</p>
        <img class="featurette-image img-responsive center-block" src="/images/texture_uvunfold_origin.png" alt="texture_uvunfold_origin">
        <p>带纹理坐标的网格简化，不仅要尽量保持住网格的几何特征，而且还要保持住UV域网格的边界几何。特别是后者，如果UV网格的边界几何变化比较大，会使得网格纹理贴图在UV边界处的颜色割缝比较明显。在UV域边界几何比较复杂的时候，UV边界处的顶点数目不可能简化太多。当网格简化数目太多的时候，绝大部分的简化点发生在UV网格的内部顶点，这也会导致原始网格的几何简化的比较厉害，并且在UV边界处的几何扭曲会比较大。</p>
        <img class="featurette-image img-responsive center-block" src="/images/texture_uvunfold_result.png" alt="texture_uvunfold_result">
        <p>提升带纹理坐标的网格简化的质量，可以考虑减小UV网格边界处的几何复杂度。比如<a href="/magic3d#unfold_smoothuvboundary" target="_blank">光滑UV网格的边界</a>（如下左图所示），或者减少边界的长度（如下右图所示）。</p>
        <img class="featurette-image img-responsive center-block" src="/images/texture_uvunfold_enhancement.png" alt="texture_uvunfold_enhancement">
<!--         <hr class="line-divider">

        <h4>带结构信息的网格简化</h4>
        <p></p> -->
 
    </div>

    <hr>
    <% include ../homepagefooter %>
  
    <!-- Placed at the end of the document so the pages load faster -->
    <script src="/javascripts/Dependence/jquery-2.1.3.min.js"></script>
    <script src="/javascripts/Dependence/bootstrap.min.js"></script>
    <!-- IE10 viewport hack for Surface/desktop Windows 8 bug -->
    <script src="/javascripts/Dependence/ie10-viewport-bug-workaround.js"></script>
    <body onload="prettyPrint()">
  </body>
</html>
